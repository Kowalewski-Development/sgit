// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd.go

// Package cmd is a generated GoMock package.
package cmd

import (
	reflect "reflect"
	types "sgit/internal/types"

	gomock "github.com/golang/mock/gomock"
)

// MockGithub is a mock of Github interface.
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
}

// MockGithubMockRecorder is the mock recorder for MockGithub.
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance.
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// GetAllRepos mocks base method.
func (m *MockGithub) GetAllRepos() ([]types.GithubRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepos")
	ret0, _ := ret[0].([]types.GithubRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepos indicates an expected call of GetAllRepos.
func (mr *MockGithubMockRecorder) GetAllRepos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepos", reflect.TypeOf((*MockGithub)(nil).GetAllRepos))
}

// GetPrimaryLanguageForRepo mocks base method.
func (m *MockGithub) GetPrimaryLanguageForRepo(n string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryLanguageForRepo", n)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryLanguageForRepo indicates an expected call of GetPrimaryLanguageForRepo.
func (mr *MockGithubMockRecorder) GetPrimaryLanguageForRepo(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryLanguageForRepo", reflect.TypeOf((*MockGithub)(nil).GetPrimaryLanguageForRepo), n)
}

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockFilesystem) CreateDirectory(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFilesystemMockRecorder) CreateDirectory(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFilesystem)(nil).CreateDirectory), path)
}

// Exists mocks base method.
func (m *MockFilesystem) Exists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFilesystemMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFilesystem)(nil).Exists), path)
}

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// CloneRepo mocks base method.
func (m *MockGit) CloneRepo(r types.GithubRepository, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepo", r, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneRepo indicates an expected call of CloneRepo.
func (mr *MockGitMockRecorder) CloneRepo(r, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepo", reflect.TypeOf((*MockGit)(nil).CloneRepo), r, path)
}

// HasLocalChanges mocks base method.
func (m *MockGit) HasLocalChanges(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLocalChanges", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLocalChanges indicates an expected call of HasLocalChanges.
func (mr *MockGitMockRecorder) HasLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLocalChanges", reflect.TypeOf((*MockGit)(nil).HasLocalChanges), path)
}

// PullLatestChanges mocks base method.
func (m *MockGit) PullLatestChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullLatestChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullLatestChanges indicates an expected call of PullLatestChanges.
func (mr *MockGitMockRecorder) PullLatestChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLatestChanges", reflect.TypeOf((*MockGit)(nil).PullLatestChanges), path)
}

// PushLocalChanges mocks base method.
func (m *MockGit) PushLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushLocalChanges indicates an expected call of PushLocalChanges.
func (mr *MockGitMockRecorder) PushLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushLocalChanges", reflect.TypeOf((*MockGit)(nil).PushLocalChanges), path)
}

// ResetLocalChanges mocks base method.
func (m *MockGit) ResetLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLocalChanges indicates an expected call of ResetLocalChanges.
func (mr *MockGitMockRecorder) ResetLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLocalChanges", reflect.TypeOf((*MockGit)(nil).ResetLocalChanges), path)
}

// StashLocalChanges mocks base method.
func (m *MockGit) StashLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// StashLocalChanges indicates an expected call of StashLocalChanges.
func (mr *MockGitMockRecorder) StashLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashLocalChanges", reflect.TypeOf((*MockGit)(nil).StashLocalChanges), path)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/intefaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	types "sgit/internal/types"

	gomock "github.com/golang/mock/gomock"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// GetAllRepos mocks base method.
func (m *MockGithubClient) GetAllRepos() ([]types.GithubRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepos")
	ret0, _ := ret[0].([]types.GithubRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepos indicates an expected call of GetAllRepos.
func (mr *MockGithubClientMockRecorder) GetAllRepos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepos", reflect.TypeOf((*MockGithubClient)(nil).GetAllRepos))
}

// GetPrimaryLanguageForRepo mocks base method.
func (m *MockGithubClient) GetPrimaryLanguageForRepo(n string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryLanguageForRepo", n)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryLanguageForRepo indicates an expected call of GetPrimaryLanguageForRepo.
func (mr *MockGithubClientMockRecorder) GetPrimaryLanguageForRepo(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryLanguageForRepo", reflect.TypeOf((*MockGithubClient)(nil).GetPrimaryLanguageForRepo), n)
}

// MockFilesystemClient is a mock of FilesystemClient interface.
type MockFilesystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemClientMockRecorder
}

// MockFilesystemClientMockRecorder is the mock recorder for MockFilesystemClient.
type MockFilesystemClientMockRecorder struct {
	mock *MockFilesystemClient
}

// NewMockFilesystemClient creates a new mock instance.
func NewMockFilesystemClient(ctrl *gomock.Controller) *MockFilesystemClient {
	mock := &MockFilesystemClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemClient) EXPECT() *MockFilesystemClientMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockFilesystemClient) CreateDirectory(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFilesystemClientMockRecorder) CreateDirectory(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFilesystemClient)(nil).CreateDirectory), path)
}

// Exists mocks base method.
func (m *MockFilesystemClient) Exists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFilesystemClientMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFilesystemClient)(nil).Exists), path)
}

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// CloneRepo mocks base method.
func (m *MockGitClient) CloneRepo(r types.GithubRepository, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepo", r, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneRepo indicates an expected call of CloneRepo.
func (mr *MockGitClientMockRecorder) CloneRepo(r, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepo", reflect.TypeOf((*MockGitClient)(nil).CloneRepo), r, path)
}

// HasLocalChanges mocks base method.
func (m *MockGitClient) HasLocalChanges(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLocalChanges", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLocalChanges indicates an expected call of HasLocalChanges.
func (mr *MockGitClientMockRecorder) HasLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLocalChanges", reflect.TypeOf((*MockGitClient)(nil).HasLocalChanges), path)
}

// PullLatestChanges mocks base method.
func (m *MockGitClient) PullLatestChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullLatestChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullLatestChanges indicates an expected call of PullLatestChanges.
func (mr *MockGitClientMockRecorder) PullLatestChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLatestChanges", reflect.TypeOf((*MockGitClient)(nil).PullLatestChanges), path)
}

// PushLocalChanges mocks base method.
func (m *MockGitClient) PushLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushLocalChanges indicates an expected call of PushLocalChanges.
func (mr *MockGitClientMockRecorder) PushLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushLocalChanges", reflect.TypeOf((*MockGitClient)(nil).PushLocalChanges), path)
}

// ResetLocalChanges mocks base method.
func (m *MockGitClient) ResetLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLocalChanges indicates an expected call of ResetLocalChanges.
func (mr *MockGitClientMockRecorder) ResetLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLocalChanges", reflect.TypeOf((*MockGitClient)(nil).ResetLocalChanges), path)
}

// StashLocalChanges mocks base method.
func (m *MockGitClient) StashLocalChanges(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashLocalChanges", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// StashLocalChanges indicates an expected call of StashLocalChanges.
func (mr *MockGitClientMockRecorder) StashLocalChanges(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashLocalChanges", reflect.TypeOf((*MockGitClient)(nil).StashLocalChanges), path)
}
